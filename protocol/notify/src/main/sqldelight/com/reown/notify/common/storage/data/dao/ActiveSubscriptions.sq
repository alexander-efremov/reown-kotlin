import kotlin.Boolean;
import kotlin.String;
import kotlin.Triple;
import kotlin.collections.Map;

CREATE TABLE ActiveSubscriptions (
    id INTEGER PRIMARY KEY AUTOINCREMENT NOT NULL,
    account TEXT NOT NULL,
    authentication_public_key TEXT NOT NULL,
    expiry INTEGER NOT NULL,
    relay_protocol TEXT NOT NULL,
    relay_data TEXT DEFAULT NULL,
    map_of_scope TEXT AS Map<String, Triple<String, String, Boolean>> NOT NULL,
    notify_topic TEXT UNIQUE NOT NULL,
    requested_subscription_id INTEGER UNIQUE DEFAULT NULL,
    last_notification_id TEXT DEFAULT NULL,
    reached_end_of_history INTEGER AS Boolean DEFAULT 0 NOT NULL
);

insertOrAbortActiveSubscribtion:
INSERT OR ABORT INTO ActiveSubscriptions(account, authentication_public_key, expiry, relay_protocol, relay_data, map_of_scope, notify_topic, requested_subscription_id)
VALUES ( ?, ?, ?, ?, ? , ?, ?, ?);

updateOrAbortActiveSubscription:
UPDATE OR ABORT ActiveSubscriptions
SET
    account = ?,
    authentication_public_key = ?,
    expiry = ?,
    relay_protocol = ?,
    relay_data = ?,
    map_of_scope = ?,
    notify_topic = ?,
    requested_subscription_id = ?
WHERE notify_topic = ?;

updateActiveSubscriptionWithLastNotificationId:
UPDATE OR ABORT ActiveSubscriptions
SET last_notification_id = ?
WHERE notify_topic = ?;

flagActiveSubscriptionAsReachedTheEndOfHistory:
UPDATE OR ABORT ActiveSubscriptions
SET reached_end_of_history = 1
WHERE notify_topic = ?;

getAllActiveSubscriptions:
SELECT account, authentication_public_key, expiry, relay_protocol, relay_data, map_of_scope, notify_topic, requested_subscription_id, last_notification_id, reached_end_of_history
FROM ActiveSubscriptions;

getActiveSubscriptionByNotifyTopic:
SELECT account, authentication_public_key, expiry, relay_protocol, relay_data, map_of_scope, notify_topic, requested_subscription_id, last_notification_id, reached_end_of_history
FROM ActiveSubscriptions
WHERE notify_topic = ?;

getActiveSubscriptionsByAccount:
SELECT account, authentication_public_key, expiry, relay_protocol, relay_data, map_of_scope, notify_topic, requested_subscription_id, last_notification_id, reached_end_of_history
FROM ActiveSubscriptions
WHERE account = ?;

updateSubscriptionScopeAndExpiryByNotifyTopic:
UPDATE OR ABORT ActiveSubscriptions
SET map_of_scope = ?, expiry = ?
WHERE notify_topic = ?;

deleteByNotifyTopic:
DELETE FROM ActiveSubscriptions
WHERE notify_topic = ?;

deleteByAccount:
DELETE FROM ActiveSubscriptions
WHERE account = ?;
